include "global.tbh"

const WLN_FWARE_FILE="WA2000_firmware.bin"
const WLN_MON_FILE="WA2000_monitor.bin"
const WLN_FWARE_VER = "00.00.23"
const WLN_MON_VER = "00.00.23"

sub delay_ms(ms as dword)

	sys.timercountms = 0
	while sys.timercountms < ms
	wend	

end sub

sub init_wln_io()
	'========================= Configure IO lines
	wln.csmap=WLN_CS
	io.num=WLN_CS
	io.enabled=YES
	wln.dimap=WLN_DI
	wln.domap=WLN_DO
	io.num=WLN_DO
	io.enabled=YES
	wln.clkmap=WLN_CLK
	io.num=WLN_CLK
	io.enabled=YES
	io.num=WLN_RST
	io.enabled=YES
end sub

sub reset_wln()
	'========================= Reset the module
	io.num=WLN_RST
	io.state=LOW
	sys.timercountms=0
	while sys.timercountms<1
	wend
	io.state=HIGH
end sub

sub upgrade_delay(filesize as dword, region as pl_wln_upgrade_regions)
	
dim write_delay_secs as dword
	dim region_name as string
	if region = PL_WLN_UPGRADE_REGION_MAIN then
		region_name = "Firmware"
	else  if region =  PL_WLN_UPGRADE_REGION_MONITOR then
		region_name = "Monitor"
	end if
	
	'We can write 8 blocks per second at worse case. in reality we dont need a delay here at this stage + time to check the firmware integrity
	write_delay_secs = (filesize/4096 + 1)/8   + 1  + (filesize/4096 + 1)/29 +1	
	while write_delay_secs > 0		
		sys.debugprint("Upgrading WA2000 " + region_name + ": " + lstri(write_delay_secs)+"\r\n")
		delay_ms(1000)
		write_delay_secs = write_delay_secs -1
	wend
end sub

sub upgrade_app()
	
	dim result as ok_ng
	dim checksum as dword=0
	dim fw_page as string(128)
	dim module_type as pl_wln_module_types
	wln.disable
	reset_wln()

	'========================= Upgrade code
	module_type = wln.getmoduletype
	delay_ms(1000)

	wln.setupgraderegion(PL_WLN_UPGRADE_REGION_MAIN)
	wln.upgrade(PL_WLN_UPGRADE_REGION_MAIN,romfile.size,checksum)
		 
	if wln.waitforupgradecompletion=OK then
		sys.debugprint("WA2000 firmware upgrades successfully\r\n")
	else	
		sys.debugprint("WA2000 firmware upgradee failed\r\n")
	end if 
end sub

sub upgrade_monitor()

	dim result as ok_ng
	dim checksum as dword=0
	dim fw_page as string(128)
	dim module_type as pl_wln_module_types
	init_wln_io()
	
	
	
	
end sub

'====================================================================

sub on_wln_event(wln_event as enum pl_wln_events)
	select case wln_event 
	case PL_WLN_EVENT_DISABLED:
		sys.debugprint("PL_WLN_EVENT_DISABLED\r\n")
	case PL_WLN_EVENT_DISASSOCIATED:
		sys.debugprint("PL_WLN_EVENT_DISASSOCIATED\r\n")
	end select
end sub

sub on_wln_task_complete(completed_task as enum pl_wln_tasks)
		select case completed_task 
		case PL_WLN_TASK_IDLE:
			sys.debugprint("PL_WLN_TASK_IDLE\r\n")
		case PL_WLN_TASK_SCAN:
			sys.debugprint("PL_WLN_TASK_SCAN\r\n")
		case PL_WLN_TASK_ASSOCIATE:
			sys.debugprint("PL_WLN_TASK_ASSOCIATE\r\n")
			sys.debugprint("State:" + stri(wln.associationstate) + "\r\n")
		case PL_WLN_TASK_SETTXPOWER:
			sys.debugprint("PL_WLN_TASK_SETTXPOWER\r\n")
		case PL_WLN_TASK_SETWEP:
			sys.debugprint("PL_WLN_TASK_SETWEP\r\n")
		case PL_WLN_TASK_DISASSOCIATE:
			sys.debugprint("PL_WLN_TASK_DISASSOCIATE\r\n")
		case PL_WLN_TASK_NETWORK_START:
			sys.debugprint("PL_WLN_TASK_NETWORK_START\r\n")
		case PL_WLN_TASK_NETWORK_STOP:
			sys.debugprint("PL_WLN_TASK_NETWORK_STOP\r\n")
		case PL_WLN_TASK_SETWPA:
			sys.debugprint("PL_WLN_TASK_SETWPA\r\n")
		case PL_WLN_TASK_ACTIVESCAN:
			sys.debugprint("PL_WLN_TASK_ACTIVESCAN\r\n")
		case PL_WLN_TASK_UPDATERSSI:
			sys.debugprint("PL_WLN_TASK_UPDATERSSI\r\n")
		case PL_WLN_TASK_SET_EAP_TLS:
			sys.debugprint("PL_WLN_TASK_SET_EAP_TLS\r\n")
		case PL_WLN_TASK_SET_EAP_PEAP:
			sys.debugprint("PL_WLN_TASK_SET_EAP_PEAP\r\n")
		case PL_WLN_TASK_SET_EAP_TTLS:
			sys.debugprint("PL_WLN_TASK_SET_EAP_TTLS\r\n")
		end select 
end sub