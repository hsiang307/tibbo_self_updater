include "global.tbh"
include "upgrade.tbh"
public dim dns_socket, request_socket, upgrade_socket as byte
dim dns_started as boolean=false
dim s as string
dim http_req_state as current_http_req_state
dim target_port as word


'Initializes sockets for DNS and Requests.
sub DHCP_DNS_init()
	
	dns_start(socket_number.dns_socket)
	sock.num=socket_number.http_socket
	sock.protocol=PL_SOCK_PROTOCOL_TCP
	sock.inconmode= PL_SOCK_INCONMODE_ANY_IP_ANY_PORT
	sock.txbuffrq(4)
	sock.rxbuffrq(4)
	sys.buffalloc()

end sub


'DNS finds IP address for specified domain name. Assigns this IP as the target IP for the Request socket.
sub start_dns(url as string)

	sock.num=dns_socket
	
	dim path as string=get_path(url)
	dim domain as string=get_domain_name(url)
	target_port=get_port(url)
	if is_ip_address(domain)<>true then
		dns_query(domain)
	else
		sock.num=socket_number.http_socket
		sock.targetport=target_port
		sock.targetip=domain
		http_req_state.state=dns_acquired
	end if

end sub


'Returns the domain name section of a given URL
function get_domain_name(url as string) as string
	dim b as byte
	if instr(1,url,"://",0)>0 then
		b=instr(1,url,"/",2)
		
		get_domain_name=right(url,len(url)-b)
	else
		get_domain_name=url
	end if
	b=instr(1,get_domain_name,"/",1)
	if b>0 then
		get_domain_name=left(get_domain_name,b-1)
	end if
	b=instr(1,get_domain_name,":",1)
	if b>0 then
		get_domain_name=left(get_domain_name,b-1)
	end if
end function


'Returns the path section of a given URL
function get_path(url as string) as string
	dim start_index as byte = 3
	if instr(1,url,"://",0)=0 then
		start_index=1
	end if
	dim b as byte=instr(1,url,"/",start_index)
	get_path=right(url,len(url)-b+1)
end function

function get_port(url as string) as word
	dim port_str as string="80"
	dim start_index as byte = 1
	if instr(1,url,"://",0)>0 then
		start_index=2
	end if
	dim b as byte=instr(1,url,":",start_index)
	if b>0 then
		port_str=right(url,len(url)-b)
		dim path as string=get_path(url)
		dim c as byte=instr(1,port_str,path,1)
		port_str=left(port_str,c-1)
	end if
	get_port=lval(port_str)
end function

function is_ip_address(domain_name as string) as boolean
	dim has_next as boolean=true
	dim index_result as byte=0
	dim current_str as string=domain_name
	dim remaining_str as string=domain_name
	dim new_str as string
	dim new_val as word
	is_ip_address=true
	while has_next
		index_result=instr(1,remaining_str,".",1)
		if index_result=0 then
			index_result=len(remaining_str)+1
			has_next=false
		end if
		current_str=left(remaining_str,index_result-1)
		remaining_str=right(remaining_str,len(remaining_str)-index_result)
		new_val=val(current_str)
		new_str=str(new_val)
		if new_str<>current_str then
			is_ip_address=false
			exit function
		end if
	wend
end function

sub callback_dns_answer_acquired(return_type as en_dns_return_type, byref return_string as string)

	dim target_ip as string
	if(return_type=EN_DNS_RET_IP) then
		target_ip = ddstr(return_string)
		sock.num=socket_number.http_socket
		sock.targetip=target_ip
		sock.targetport=target_port
	end if

end sub


sub callback_dns_ok()

	http_req_state.state=dns_acquired

end sub


sub send_request(interface as pl_sock_interfaces) 
	
	if download_url.firmware_url="" then
		exit sub
	end if
	while http_req_state.state<>dns_acquired
		doevents
	wend
	dim request as string="GET " + get_path(download_url.firmware_url) + " HTTP/1.1\x0d\x0aHost: " + get_domain_name(download_url.firmware_url) + "\x0d\x0a\x0d\x0a"
	sock.num=socket_number.http_socket
	sock.targetinterface=interface
	sock.connect()
	while sock.statesimple<>PL_SSTS_EST
		doevents
	wend
	sock.setdata(request)
	sock.send()
	sys.debugprint(request)
	download_url.firmware_url=""
	
end sub


sub remove_http_headers()
	
	if http_req_state.state<>dns_acquired or sock.num<>socket_number.http_socket then
		exit sub
	end if
	dim data as string
	dim startp as byte	
	while sock.rxlen>0
		data=sock.peekdata(255)
		startp=instr(1,data,"\x0d\x0a\x0d\x0a", 1)
		if startp=0 then
			sock.getdata(230)
		else 
			sock.getdata(startp+3)
			http_req_state.state=headers_removed
			sys.debugprint("Headers removed")
			exit sub
		end if
	wend
	
end sub


sub on_sock_data_arrival()
	
	#if GA1000 
		wln_proc_data()
	#endif
'	sys.debugprint(sock.peekdata(sock.rxlen)+"\r\n")
	dhcp_proc_data()
	dns_proc_data()
	remove_http_headers()
	if sock.num=socket_number.http_socket or sock.num=socket_number.upgrade_socket then
		device_firmware_upload_update()
	end if
	
end sub


sub init_web_receive_socket()
	
	dim prevsock as byte=sock.num
	sock.num=socket_number.upgrade_socket
	sock.targetinterface=PL_SOCK_INTERFACE_NET
	sock.protocol=PL_SOCK_PROTOCOL_TCP
	sock.inconmode=PL_SOCK_INCONMODE_ANY_IP_ANY_PORT
	sock.allowedinterfaces="WLN,NET"
	sock.localportlist="1000"
	sock.rxbuffrq(4)
	sock.txbuffrq(4) 
	sys.buffalloc
	sock.num=prevsock
	
end sub