include "global.tbh"
include "upgrade.tbh"
dim pattern_timer as dword = sys.timercount
dim led_detect_timer as byte

sub device_firmware_download_init_ble()
	 sys.halt
end sub

function device_firmware_read_32_uint() as dword
	dim l as byte(4)
	dim s as string
	select case current_fw_upg_state.source		 
	
		case PL_FW_UPG_WEB:
			sock.num=socket_number.http_socket		 
			l=sock.getdata(4)
			device_firmware_read_32_uint =  l(0) + (l(1) shl 8) + (l(2) shl 16)  + (l(3) shl 24) 
		case PL_FW_UPG_SOCK:
			sock.num=socket_number.upgrade_socket
			l=sock.getdata(4)
			device_firmware_read_32_uint =  l(0) + (l(1) shl 8) + (l(2) shl 16)  + (l(3) shl 24) 							 
		case PL_FW_UPG_SER:
			ser.num=current_fw_upg_state.source_num
			l=ser.getdata(4)
			device_firmware_read_32_uint =  l(0) + (l(1) shl 8) + (l(2) shl 16)  + (l(3) shl 24) 							 
		case else:
			l(0)=0
			l(1)=0
			l(2)=0
			l(3)=0
	end select
	
	dim d1 as dword=l(0)
	dim d2 as dword=l(1)
	dim d3 as dword=l(2)
	dim d4 as dword=l(3)
	
	device_firmware_read_32_uint =  l(0) + (l(1) shl 8) + (l(2) shl 16)  + (l(3) shl 24) 	
	device_firmware_read_32_uint =  d1 + (d2 shl 8) + (d3 shl 16)  + (d4 shl 24) 	


end function

function device_firmware_bytes_available() as dword
	
	select case current_fw_upg_state.source
		case PL_FW_UPG_WEB:
			sock.num=socket_number.http_socket
			device_firmware_bytes_available=sock.rxlen							 
		case PL_FW_UPG_SOCK:
			sock.num=socket_number.upgrade_socket
			device_firmware_bytes_available=sock.rxlen
		case PL_FW_UPG_SER:
			ser.num=current_fw_upg_state.source_num
			device_firmware_bytes_available=ser.rxlen
		case else:
			device_firmware_bytes_available = 0
	end select
	
end function

sub device_firmware_read_data(byref data as string, byref count as dword)

	select case current_fw_upg_state.source
		case PL_FW_UPG_WEB:
			sock.num=socket_number.http_socket
			data = sock.getdata(count)				 
		case PL_FW_UPG_SOCK:
			sock.num=socket_number.upgrade_socket
			data = sock.getdata(count)	
		case PL_FW_UPG_SER:
			ser.num=current_fw_upg_state.source_num
			data = ser.getdata(count)
		case else:
			data = ""
	end select
	
end sub

sub set_LED(pattern as byte)

	dim f,x as byte
	dim s as string(8)
	
	s=mid(bin(pattern),3,8)
	s=strgen(8-len(s),"0")+s	
	
	'make 5 clocks
'	io.num=PL_IO_NUM_47
	for f=0 to 4
		x=1-val(mid(s,f+4,1))
'		io.lineset(PL_IO_NUM_48,x)
		io.state=LOW
		io.state=HIGH
	next f
	
end sub


