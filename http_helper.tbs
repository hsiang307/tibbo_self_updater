include "global.tbh"

dim startp as byte
dim b,c as byte=0
dim httpstring as string

enum states
	
	RESPONSE,
	KEY,
	VALUE,
	ASSIGN,
	COMPLETE,
	ERROR
	
end enum

dim state as states=RESPONSE

type header_values

	key(20) as string
	value(20) as string

end type

type header_types

	access_control_allow_origin as string
	access_control_allow_credentials as string
	access_control_expose_headers as string
	access_control_max_age as string
	access_control_allow_methods as string 
	access_control_allow_headers as string  	 
	allow as string
	content_encoding as string   	 
	content_language as string
	content_length as string
	content_location as string
	content_range as string
	content_type as string
	expires as string
	location as string
	response as string
	server as string
	set_cookie as string 
	upgrade as string
	www_authenticate as string

end type

dim http_header_values as header_values
dim http_header as header_types

'Removes all HTTP headers.

sub skip_http_headers(sock_number as byte)
	
	dim data as string
	data=sock.peekdata(255)
	dim startp as byte	
	
	while sock.rxlen>0
		startp=instr(1,data,"\x0d\x0a\x0d\x0a", 1)
		if startp=0 then
			sock.getdata(230)
		else 
			sock.getdata(startp+3)
			exit sub
		end if
	wend
			
end sub

sub get_http_headers()

	if sock.rxlen<4 then
		exit sub
	end if
	
	select case state
	
	case RESPONSE: 
	
		http_header.response=get_response()
		update_state()
		sys.debugprint("Getting Response\r\n")

	case KEY:
		
		http_header_values.key(b)=get_key()
		update_state()
		sys.debugprint("Getting Key\r\n")

	case VALUE:
	
		http_header_values.value(b)=get_value()
		update_state()
		b=b+1	
		c=c+1	
		sys.debugprint("Getting Value\r\n")

	case ASSIGN:
		
		assign_header_values()
		sys.debugprint("Headers Assigned\r\n")
		state=COMPLETE
		dim s as string=get_header_value("Datea") 
		sys.debugprint(s)
	case COMPLETE:
	
		exit sub

	case ERROR:
	
		sys.debugprint("ERROR\r\n")
		
	end select
	
end sub

function get_response() as string
	
	sock.getdata(9)
	httpstring=sock.peekdata(255)
	startp=instr(1,httpstring,"\x0d\x0a", 1)
	get_response=sock.getdata(startp-1)
	
end function

function get_key() as string
	
	httpstring=sock.peekdata(255)
	startp=instr(1,httpstring,":", 1)
	get_key=sock.getdata(startp-1)
	
end function

function get_value() as string
	
	httpstring=sock.peekdata(255)
	startp=instr(1,httpstring,"\x0d\x0a", 1)
	get_value=sock.getdata(startp-1)
	
end function

sub update_state()

		httpstring=sock.peekdata(255)
		if left(httpstring,4)="\x0d\x0a\x0d\x0a" then
			state=ASSIGN
		else if left(httpstring,2)="\x0d\x0a" then
			sock.getdata(2)
			state=KEY
		else if left(httpstring,2)=": " then
			sock.getdata(2)
			state=VALUE
		else
			state=ERROR
		end if
		
end sub

'Iterates through http_header_values keys. If the key matches a header type stored in the header_types type, the value is assigned to the appropriate header type.

sub assign_header_values()

	for b=0 to c
	
		select case http_header_values.key(b)
			
			case "Access-Control-Allow-Origin": 		http_header.access_control_allow_origin=http_header_values.value(b)
			case "Access-Control-Allow-Credentials":	http_header.access_control_allow_credentials=http_header_values.value(b)
			case "Access-Control-Expose-Headers":		http_header.access_control_expose_headers=http_header_values.value(b)
			case "Access-Control-Max-Age":				http_header.access_control_max_age=http_header_values.value(b)
			case "Access-Control-Allow-Methods":		http_header.access_control_allow_methods=http_header_values.value(b)
			case "Access-Control-Allow-Headers":		http_header.access_control_allow_headers=http_header_values.value(b)
			case "Allow":								http_header.allow=http_header_values.value(b)
			case "Content-Encoding":					http_header.content_encoding=http_header_values.value(b)
			case "Content-Language":					http_header.content_language=http_header_values.value(b)
			case "Content-Length":						http_header.content_length=http_header_values.value(b)
			case "Content-Location":					http_header.content_location=http_header_values.value(b)
			case "Content-Range":						http_header.content_range=http_header_values.value(b)
			case "Content-Type":						http_header.content_type=http_header_values.value(b)
			case "Expires":								http_header.expires=http_header_values.value(b)
			case "Location":							http_header.location=http_header_values.value(b)
			case "Server":								http_header.server=http_header_values.value(b)
			case "Set-Cookie":							http_header.set_cookie=http_header_values.value(b)
			case "Upgrade":								http_header.upgrade=http_header_values.value(b)
			case "WWW-Authenticate":					http_header.www_authenticate=http_header_values.value(b)
			case else:
			
		end select
		
	next b
	
end sub

function get_header_value(header as string) as string
	
	dim b as byte=0
	dim key, value as string
	dim moreheaders as boolean=true
	
	while moreheaders=true
	
		if header=http_header_values.key(b) then
			get_header_value=http_header_values.value
			exit while
		end if

		if http_header_values.key(b)="" then
			get_header_value="Header not found"
			exit while
		end if
		
		b=b+1
		
	wend 

end function