include "global.tbh"
include "upgrade.tbh"
dim current_upgrade_install_state as upgrade_install_state

sub on_sys_init()
	
	init()
	DHCP_DNS_init()

end sub

'Callback when the file type is read to let app know what will be updated.  

sub on_firmware_update_start(byref current_fw_upg_state as pl_upg_state_t) 

	sys.debugprint("Upload started\r\n")

end sub

sub on_firmware_update_data_received(byref current_fw_upg_state as pl_upg_state_t) 

end sub

'Callback when data has been written to flash.

sub on_firmware_update_percent_change(byref current_fw_upg_state as pl_upg_state_t) 

'	sys.debugprint("Data has been written to flash\r\n")
	
end sub

'Callback when all files have been downloaded. 

sub on_firmware_update_file_complete(byref current_fw_upg_state as pl_upg_state_t)		
		
	sys.debugprint("Upload complete\r\n")
		
end sub

sub upgrade_delay(filesize as dword, region as pl_wln_upgrade_regions)
	
dim write_delay_secs as dword
	dim region_name as string
	if region = PL_WLN_UPGRADE_REGION_MAIN then
		region_name = "Firmware"
	else  if region =  PL_WLN_UPGRADE_REGION_MONITOR then
		region_name = "Monitor"
	end if
	
	'We can write 8 blocks per second at worse case. in reality we dont need a delay here at this stage + time to check the firmware integrity
	write_delay_secs = (filesize/4096 + 1)/8   + 1  + (filesize/4096 + 1)/29 +1	
	while write_delay_secs > 0		
		sys.debugprint("Upgrading WA2000 " + region_name + ": " + lstri(write_delay_secs)+"\r\n")
		delay_ms(1000)
		write_delay_secs = write_delay_secs -1
	wend
	
end sub

sub delay_ms(ms as dword)

	sys.timercountms = 0
	while sys.timercountms < ms
	wend	

end sub

'Callback when all files have been downloaded. 

sub on_firmware_update_complete(byref current_fw_upg_state as pl_upg_state_t)	

	sys.debugprint("All files have been downloaded.\r\n")

	dim f as byte
		
	for f=0 to current_fw_upg_state.fw_receivedfiles
		
		if current_fw_upg_state.fw_types(f)=WA2000_MON then
		
			update_device(PL_WLN_UPGRADE_REGION_MONITOR, current_fw_upg_state.fw_lengths(f), current_fw_upg_state.fw_checksums(f))
		
			sys.debugprint("WA2000_MON\r\n")	
			
		else if current_fw_upg_state.fw_types(f)=WA2000_APP then
		
			update_device(PL_WLN_UPGRADE_REGION_MAIN, current_fw_upg_state.fw_lengths(f), current_fw_upg_state.fw_checksums(f))
			
			sys.debugprint("WA2000_APP\r\n")
				
		else if current_fw_upg_state.fw_types(f)=COMPRESSED_TIOS then
		
			sys.debugprint("COMPRESSED_TIOS\r\n")
						
		else if current_fw_upg_state.fw_types(f)=UNCOMPRESSED_TIOS then
		
			sys.debugprint("UNCOMPRESSED_TIOS\r\n")
			
		else if current_fw_upg_state.fw_types(f)=COMPRESSED_TIOS_APP then
	
			sys.debugprint("COMPRESSED_TIOS_APP\r\n")
						
		else if current_fw_upg_state.fw_types(f)=UNCOMPRESSED_TIOS_APP then
		
			sys.debugprint("UNCOMPRESSED_TIOS_APP\r\n")
		
		end if
			
	next f
	
end sub

sub update_device(region as pl_wln_upgrade_regions, length as dword, checksum as dword)
	
	wln.setupgraderegion(region)
	wln.upgrade(region,length,checksum)
	upgrade_delay(length, region)
	if wln.waitforupgradecompletion=OK then
		sys.debugprint("WA2000 firmware upgraded successfully\r\n")
'		sys.debugprint("Current Version: " + WLN_FWARE_VER + "\r\n")
	else	
		sys.debugprint("WA2000 firmware upgrade failed\r\n")
		pat.play("~R",PL_PAT_CANINT)
		current_upgrade_install_state.state=ng
	end if 

end sub